test1  equality of various representations of sets.    
test2  equality of various representations of functions. 
test3  function application. 
test4  fingerprinting of sets. 
test5  Cartesian Product. 
test6  Propositional Logic. 
test7  Predicate Logic and CHOOSE 
test8  set operators \cup, \cap, \subseteq, \ 
test9  set constructors {x \in S : P(x)} and {e(x) : x \in S} 
test10 function definition and application
test11 DOMAIN and Function Sets
test12 Record constructs
test13 Tuples and Cartesian products. 
       Needs to be expanded when Cartesian product bug fixed.
test14 IF and CASE and nested junctions
test15 the empty set
test16 one-tuples
test17 expressions with primes.
test18 fingerprinting
test19 large initial state space
test20 ENABLED
test21 priming and variable confusion 
test22 fingerprinting of [S -> [S -> SUBSET T]]
test23 definitions from the Bags module
test24 UNCHANGED
test25 fingerprinting elements in [A -> [B -> C]]  
test26 LET
test27 fingerprint test modeling LazyCache
test28 Using already-computed state components properly in INIT
test29 Using already-computed primed state components properly in NEXT
test30 Replacement of and by infix operators and overridden operators
test31 x' \in S in NEXT
test32 [A]_e and <<A>>_e
test33 large sets of functions
test34 model values
test35 standard Sequences module
test36 standard Bags module
       Needs to be modified when SubBag is implemented.
test37 standard FiniteSets module
test38 EXTENDS 
test39 Priming of operator arguments
test40 Test of Naturals module
test41 Test of Integers
test42 Test of operator arguments
test43 Test of TLC module
test44 operator precedence and associativity 
test45 recursive function definitions.
test46 found a bug in Version 1.03 of 18 Oct 1999
test47 Tests that both Naturals and Integers can be EXTENDed.
test48 Tests definability of most user-definable operators
test49 Tests definability of user-definable operators with aliases
test50 Tests if aliases can be used operators in standard modules.

etest1 Operator called with too many arguments
etest2 Operator called with too few arguments
etest3 Deadlock and number of states found.
etest4 Evaluates m[v] for model-value m.
etest5 M!Ident for nonexistent module M.
etest6 Defining x' in terms of x'
etest7 Replacement of constant by variable
etest8 test that simulation mode doesn't check for deadlock
etest9 test that x \in Nat doesn't work if x not a number
etest10 test that x \in Int doesn't work if x not a number
etest11 test that x \in STRING doesn't work if x not a string.
etest12 test that Nat doesn't define -1

